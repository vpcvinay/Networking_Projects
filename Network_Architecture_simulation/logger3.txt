the message seding to neighbor is {1: ['X'], 5: ['X']}['X']
the final message to buffer is ['R', '3', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 5: ['X']}['X']
the final message to buffer is ['R', '3', '5', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 5: ['X']}['X']
the final message to buffer is ['R', '3', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 5: ['X']}['X']
the final message to buffer is ['R', '3', '5', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 5: ['X'], 6: [5], 7: [1]}['X']
the final message to buffer is ['R', '3', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 2: [1], 5: ['X'], 6: [5], 7: [1]}['X']
the final message to buffer is ['R', '3', '5', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 5: ['X'], 6: [5], 7: [1]}[5]
Checking the if condition ['5']TrueFalse

the final message to buffer is ['R', '3', '5', '6', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 2: [1], 5: ['X'], 6: [5], 7: [1]}['X']
the final message to buffer is ['R', '3', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '3', '1', '2', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 5: ['X'], 6: [5], 7: [1]}['X']
the final message to buffer is ['R', '3', '5', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 5: ['X'], 6: [5], 7: [1]}[5]
Checking the if condition ['5']TrueFalse


Skipping the route path through the same node :['5']5

the message seding to neighbor is {1: ['X'], 2: [1], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '3', '1', '7', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}['X']
the final message to buffer is ['R', '3', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[5, 6]
Checking the if condition ['5', '6']TrueFalse

the final message to buffer is ['R', '3', '5', '6', '4', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}['X']
the final message to buffer is ['R', '3', '5', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[5]
Checking the if condition ['5']TrueFalse

the final message to buffer is ['R', '3', '5', '6', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}['X']
the final message to buffer is ['R', '3', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '3', '1', '2', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[5, 6]
Checking the if condition ['5', '6']TrueFalse


Skipping the route path through the same node :['5', '6']5

the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}['X']
the final message to buffer is ['R', '3', '5', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[5]
Checking the if condition ['5']TrueFalse


Skipping the route path through the same node :['5']5

the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '3', '1', '7', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}['X']
the final message to buffer is ['R', '3', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[5, 6]
Checking the if condition ['5', '6']TrueFalse

the final message to buffer is ['R', '3', '5', '6', '4', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}['X']
the final message to buffer is ['R', '3', '5', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[5]
Checking the if condition ['5']TrueFalse

the final message to buffer is ['R', '3', '5', '6', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}['X']
the final message to buffer is ['R', '3', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '3', '1', '2', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[5, 6]
Checking the if condition ['5', '6']TrueFalse


Skipping the route path through the same node :['5', '6']5

the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}['X']
the final message to buffer is ['R', '3', '5', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[5]
Checking the if condition ['5']TrueFalse


Skipping the route path through the same node :['5']5

the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '3', '1', '7', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}['X']
the final message to buffer is ['R', '3', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[5, 6]
Checking the if condition ['5', '6']TrueFalse

the final message to buffer is ['R', '3', '5', '6', '4', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}['X']
the final message to buffer is ['R', '3', '5', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[5]
Checking the if condition ['5']TrueFalse

the final message to buffer is ['R', '3', '5', '6', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}['X']
the final message to buffer is ['R', '3', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '3', '1', '2', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[5, 6]
Checking the if condition ['5', '6']TrueFalse


Skipping the route path through the same node :['5', '6']5

the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}['X']
the final message to buffer is ['R', '3', '5', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[5]
Checking the if condition ['5']TrueFalse


Skipping the route path through the same node :['5']5

the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '3', '1', '7', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['INF'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}['INF']
the message seding to neighbor is {1: ['INF'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueTrue

HITING the infinity check ['INF']

the message seding to neighbor is {1: ['INF'], 2: ['INF'], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[5, 6]
Checking the if condition ['5', '6']TrueFalse

the final message to buffer is ['R', '3', '5', '6', '4', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['INF'], 2: ['INF'], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}['X']
the final message to buffer is ['R', '3', '5', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['INF'], 2: ['INF'], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[5]
Checking the if condition ['5']TrueFalse

the final message to buffer is ['R', '3', '5', '6', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['INF'], 2: ['INF'], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueTrue

HITING the infinity check ['INF']

the message seding to neighbor is {1: ['INF'], 2: ['INF'], 4: [5, 6], 5: ['X'], 6: [5], 7: ['INF']}['INF']
the message seding to neighbor is {1: ['INF'], 2: ['INF'], 4: [5, 6], 5: ['X'], 6: [5], 7: ['INF']}['INF']
the message seding to neighbor is {1: ['INF'], 2: ['INF'], 4: [5, 6], 5: ['X'], 6: [5], 7: ['INF']}[5, 6]
Checking the if condition ['5', '6']TrueFalse


Skipping the route path through the same node :['5', '6']5

the message seding to neighbor is {1: ['INF'], 2: ['INF'], 4: [5, 6], 5: ['X'], 6: [5], 7: ['INF']}['X']
the final message to buffer is ['R', '3', '5', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['INF'], 2: ['INF'], 4: [5, 6], 5: ['X'], 6: [5], 7: ['INF']}[5]
Checking the if condition ['5']TrueFalse


Skipping the route path through the same node :['5']5

the message seding to neighbor is {1: ['INF'], 2: ['INF'], 4: [5, 6], 5: ['X'], 6: [5], 7: ['INF']}['INF']

updating the path 7['INF']
updated path 7[5, 6]


the message seding to neighbor is {1: ['INF'], 2: ['INF'], 4: [5, 6], 5: ['X'], 6: [5], 7: [5, 6]}['INF']
the message seding to neighbor is {1: ['INF'], 2: ['INF'], 4: [5, 6], 5: ['X'], 6: [5], 7: [5, 6]}['INF']
the message seding to neighbor is {1: ['INF'], 2: ['INF'], 4: [5, 6], 5: ['X'], 6: [5], 7: [5, 6]}[5, 6]
Checking the if condition ['5', '6']TrueFalse

the final message to buffer is ['R', '3', '5', '6', '4', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['INF'], 2: ['INF'], 4: [5, 6], 5: ['X'], 6: [5], 7: [5, 6]}['X']
the final message to buffer is ['R', '3', '5', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['INF'], 2: ['INF'], 4: [5, 6], 5: ['X'], 6: [5], 7: [5, 6]}[5]
Checking the if condition ['5']TrueFalse

the final message to buffer is ['R', '3', '5', '6', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['INF'], 2: ['INF'], 4: [5, 6], 5: ['X'], 6: [5], 7: [5, 6]}[5, 6]
Checking the if condition ['5', '6']TrueFalse

the final message to buffer is ['R', '3', '5', '6', '7', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['INF'], 2: ['INF'], 4: [5, 6], 5: ['X'], 6: [5], 7: [5, 6]}['INF']
the message seding to neighbor is {1: ['INF'], 2: ['INF'], 4: [5, 6], 5: ['X'], 6: [5], 7: [5, 6]}['INF']
the message seding to neighbor is {1: ['INF'], 2: ['INF'], 4: [5, 6], 5: ['X'], 6: [5], 7: [5, 6]}[5, 6]
Checking the if condition ['5', '6']TrueFalse


Skipping the route path through the same node :['5', '6']5

the message seding to neighbor is {1: ['INF'], 2: ['INF'], 4: [5, 6], 5: ['X'], 6: [5], 7: [5, 6]}['X']
the final message to buffer is ['R', '3', '5', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['INF'], 2: ['INF'], 4: [5, 6], 5: ['X'], 6: [5], 7: [5, 6]}[5]
Checking the if condition ['5']TrueFalse


Skipping the route path through the same node :['5']5

the message seding to neighbor is {1: ['INF'], 2: ['INF'], 4: [5, 6], 5: ['X'], 6: [5], 7: [5, 6]}[5, 6]
Checking the if condition ['5', '6']TrueFalse


Skipping the route path through the same node :['5', '6']5


updating the path 2['INF']
updated path 2[1]


the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [5, 6]}['X']
the final message to buffer is ['R', '3', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [5, 6]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [5, 6]}[5, 6]
Checking the if condition ['5', '6']TrueFalse

the final message to buffer is ['R', '3', '5', '6', '4', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [5, 6]}['X']
the final message to buffer is ['R', '3', '5', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [5, 6]}[5]
Checking the if condition ['5']TrueFalse

the final message to buffer is ['R', '3', '5', '6', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [5, 6]}[5, 6]
Checking the if condition ['5', '6']TrueFalse

the final message to buffer is ['R', '3', '5', '6', '7', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [5, 6]}['X']
the final message to buffer is ['R', '3', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [5, 6]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '3', '1', '2', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [5, 6]}[5, 6]
Checking the if condition ['5', '6']TrueFalse


Skipping the route path through the same node :['5', '6']5

the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [5, 6]}['X']
the final message to buffer is ['R', '3', '5', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [5, 6]}[5]
Checking the if condition ['5']TrueFalse


Skipping the route path through the same node :['5']5

the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [5, 6]}[5, 6]
Checking the if condition ['5', '6']TrueFalse


Skipping the route path through the same node :['5', '6']5

the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}['X']
the final message to buffer is ['R', '3', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[5, 6]
Checking the if condition ['5', '6']TrueFalse

the final message to buffer is ['R', '3', '5', '6', '4', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}['X']
the final message to buffer is ['R', '3', '5', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[5]
Checking the if condition ['5']TrueFalse

the final message to buffer is ['R', '3', '5', '6', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}['X']
the final message to buffer is ['R', '3', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '3', '1', '2', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[5, 6]
Checking the if condition ['5', '6']TrueFalse


Skipping the route path through the same node :['5', '6']5

the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}['X']
the final message to buffer is ['R', '3', '5', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[5]
Checking the if condition ['5']TrueFalse


Skipping the route path through the same node :['5']5

the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '3', '1', '7', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}['X']
the final message to buffer is ['R', '3', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[5, 6]
Checking the if condition ['5', '6']TrueFalse

the final message to buffer is ['R', '3', '5', '6', '4', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}['X']
the final message to buffer is ['R', '3', '5', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[5]
Checking the if condition ['5']TrueFalse

the final message to buffer is ['R', '3', '5', '6', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}['X']
the final message to buffer is ['R', '3', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '3', '1', '2', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[5, 6]
Checking the if condition ['5', '6']TrueFalse


Skipping the route path through the same node :['5', '6']5

the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}['X']
the final message to buffer is ['R', '3', '5', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[5]
Checking the if condition ['5']TrueFalse


Skipping the route path through the same node :['5']5

the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '3', '1', '7', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}['X']
the final message to buffer is ['R', '3', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[5, 6]
Checking the if condition ['5', '6']TrueFalse

the final message to buffer is ['R', '3', '5', '6', '4', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}['X']
the final message to buffer is ['R', '3', '5', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[5]
Checking the if condition ['5']TrueFalse

the final message to buffer is ['R', '3', '5', '6', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}['X']
the final message to buffer is ['R', '3', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '3', '1', '2', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[5, 6]
Checking the if condition ['5', '6']TrueFalse


Skipping the route path through the same node :['5', '6']5

the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}['X']
the final message to buffer is ['R', '3', '5', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[5]
Checking the if condition ['5']TrueFalse


Skipping the route path through the same node :['5']5

the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '3', '1', '7', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}['X']
the final message to buffer is ['R', '3', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[5, 6]
Checking the if condition ['5', '6']TrueFalse

the final message to buffer is ['R', '3', '5', '6', '4', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}['X']
the final message to buffer is ['R', '3', '5', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[5]
Checking the if condition ['5']TrueFalse

the final message to buffer is ['R', '3', '5', '6', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}['X']
the final message to buffer is ['R', '3', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '3', '1', '2', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[5, 6]
Checking the if condition ['5', '6']TrueFalse


Skipping the route path through the same node :['5', '6']5

the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}['X']
the final message to buffer is ['R', '3', '5', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[5]
Checking the if condition ['5']TrueFalse


Skipping the route path through the same node :['5']5

the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '3', '1', '7', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}['X']
the final message to buffer is ['R', '3', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[5, 6]
Checking the if condition ['5', '6']TrueFalse

the final message to buffer is ['R', '3', '5', '6', '4', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}['X']
the final message to buffer is ['R', '3', '5', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[5]
Checking the if condition ['5']TrueFalse

the final message to buffer is ['R', '3', '5', '6', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}['X']
the final message to buffer is ['R', '3', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '3', '1', '2', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[5, 6]
Checking the if condition ['5', '6']TrueFalse


Skipping the route path through the same node :['5', '6']5

the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}['X']
the final message to buffer is ['R', '3', '5', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[5]
Checking the if condition ['5']TrueFalse


Skipping the route path through the same node :['5']5

the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '3', '1', '7', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}['X']
the final message to buffer is ['R', '3', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[5, 6]
Checking the if condition ['5', '6']TrueFalse

the final message to buffer is ['R', '3', '5', '6', '4', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}['X']
the final message to buffer is ['R', '3', '5', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[5]
Checking the if condition ['5']TrueFalse

the final message to buffer is ['R', '3', '5', '6', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}['X']
the final message to buffer is ['R', '3', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '3', '1', '2', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[5, 6]
Checking the if condition ['5', '6']TrueFalse


Skipping the route path through the same node :['5', '6']5

the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}['X']
the final message to buffer is ['R', '3', '5', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[5]
Checking the if condition ['5']TrueFalse


Skipping the route path through the same node :['5']5

the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '3', '1', '7', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}['X']
the final message to buffer is ['R', '3', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[5, 6]
Checking the if condition ['5', '6']TrueFalse

the final message to buffer is ['R', '3', '5', '6', '4', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}['X']
the final message to buffer is ['R', '3', '5', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[5]
Checking the if condition ['5']TrueFalse

the final message to buffer is ['R', '3', '5', '6', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}['X']
the final message to buffer is ['R', '3', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '3', '1', '2', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[5, 6]
Checking the if condition ['5', '6']TrueFalse


Skipping the route path through the same node :['5', '6']5

the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}['X']
the final message to buffer is ['R', '3', '5', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[5]
Checking the if condition ['5']TrueFalse


Skipping the route path through the same node :['5']5

the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '3', '1', '7', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}['X']
the final message to buffer is ['R', '3', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[5, 6]
Checking the if condition ['5', '6']TrueFalse

the final message to buffer is ['R', '3', '5', '6', '4', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}['X']
the final message to buffer is ['R', '3', '5', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[5]
Checking the if condition ['5']TrueFalse

the final message to buffer is ['R', '3', '5', '6', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}['X']
the final message to buffer is ['R', '3', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '3', '1', '2', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[5, 6]
Checking the if condition ['5', '6']TrueFalse


Skipping the route path through the same node :['5', '6']5

the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}['X']
the final message to buffer is ['R', '3', '5', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]
the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[5]
Checking the if condition ['5']TrueFalse


Skipping the route path through the same node :['5']5

the message seding to neighbor is {1: ['X'], 2: [1], 4: [5, 6], 5: ['X'], 6: [5], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '3', '1', '7', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 5]



[]
