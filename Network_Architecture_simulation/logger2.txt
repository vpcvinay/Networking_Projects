the message seding to neighbor is {1: ['X'], 4: ['X']}['X']
the final message to buffer is ['R', '2', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 4: ['X']}['X']
the final message to buffer is ['R', '2', '4', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 4: ['X']}['X']
the final message to buffer is ['R', '2', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 4: ['X']}['X']
the final message to buffer is ['R', '2', '4', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '4', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 6: [4], 7: [1]}[4]
Checking the if condition ['4']TrueFalse

the final message to buffer is ['R', '2', '4', '6', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '2', '1', '3', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '4', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 6: [4], 7: [1]}[4]
Checking the if condition ['4']TrueFalse


Skipping the route path through the same node :['4']4

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '2', '1', '7', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [1, 3], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [1, 3], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [1, 3], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '4', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [1, 3], 6: [4], 7: [1]}[1, 3]
Checking the if condition ['1', '3']TrueFalse


Skipping the route path through the same node :['1', '3']1

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [1, 3], 6: [4], 7: [1]}[4]
Checking the if condition ['4']TrueFalse

the final message to buffer is ['R', '2', '4', '6', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [1, 3], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [1, 3], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [1, 3], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '2', '1', '3', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [1, 3], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '4', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [1, 3], 6: [4], 7: [1]}[1, 3]
Checking the if condition ['1', '3']TrueFalse

the final message to buffer is ['R', '2', '1', '3', '5', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [1, 3], 6: [4], 7: [1]}[4]
Checking the if condition ['4']TrueFalse


Skipping the route path through the same node :['4']4

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [1, 3], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '2', '1', '7', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [1, 3], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [1, 3], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [1, 3], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '4', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [1, 3], 6: [4], 7: [1]}[1, 3]
Checking the if condition ['1', '3']TrueFalse


Skipping the route path through the same node :['1', '3']1

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [1, 3], 6: [4], 7: [1]}[4]
Checking the if condition ['4']TrueFalse

the final message to buffer is ['R', '2', '4', '6', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [1, 3], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [1, 3], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [1, 3], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '2', '1', '3', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [1, 3], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '4', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [1, 3], 6: [4], 7: [1]}[1, 3]
Checking the if condition ['1', '3']TrueFalse

the final message to buffer is ['R', '2', '1', '3', '5', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [1, 3], 6: [4], 7: [1]}[4]
Checking the if condition ['4']TrueFalse


Skipping the route path through the same node :['4']4

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [1, 3], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '2', '1', '7', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [1, 3], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [1, 3], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [1, 3], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '4', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [1, 3], 6: [4], 7: [1]}[1, 3]
Checking the if condition ['1', '3']TrueFalse


Skipping the route path through the same node :['1', '3']1

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [1, 3], 6: [4], 7: [1]}[4]
Checking the if condition ['4']TrueFalse

the final message to buffer is ['R', '2', '4', '6', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [1, 3], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [1, 3], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [1, 3], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '2', '1', '3', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [1, 3], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '4', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [1, 3], 6: [4], 7: [1]}[1, 3]
Checking the if condition ['1', '3']TrueFalse

the final message to buffer is ['R', '2', '1', '3', '5', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [1, 3], 6: [4], 7: [1]}[4]
Checking the if condition ['4']TrueFalse


Skipping the route path through the same node :['4']4

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [1, 3], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '2', '1', '7', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['INF'], 3: [1], 4: ['X'], 5: [1, 3], 6: [4], 7: [1]}['INF']
the message seding to neighbor is {1: ['INF'], 3: [1], 4: ['X'], 5: [1, 3], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueTrue

HITING the infinity check ['INF']

the message seding to neighbor is {1: ['INF'], 3: ['INF'], 4: ['X'], 5: [1, 3], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '4', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['INF'], 3: ['INF'], 4: ['X'], 5: [1, 3], 6: [4], 7: [1]}[1, 3]
Checking the if condition ['1', '3']TrueTrue

HITING the infinity check ['INF']

the message seding to neighbor is {1: ['INF'], 3: ['INF'], 4: ['X'], 5: ['INF'], 6: [4], 7: [1]}[4]
Checking the if condition ['4']TrueFalse

the final message to buffer is ['R', '2', '4', '6', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['INF'], 3: ['INF'], 4: ['X'], 5: ['INF'], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueTrue

HITING the infinity check ['INF']

the message seding to neighbor is {1: ['INF'], 3: ['INF'], 4: ['X'], 5: ['INF'], 6: [4], 7: ['INF']}['INF']
the message seding to neighbor is {1: ['INF'], 3: ['INF'], 4: ['X'], 5: ['INF'], 6: [4], 7: ['INF']}['INF']
the message seding to neighbor is {1: ['INF'], 3: ['INF'], 4: ['X'], 5: ['INF'], 6: [4], 7: ['INF']}['X']
the final message to buffer is ['R', '2', '4', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['INF'], 3: ['INF'], 4: ['X'], 5: ['INF'], 6: [4], 7: ['INF']}['INF']
the message seding to neighbor is {1: ['INF'], 3: ['INF'], 4: ['X'], 5: ['INF'], 6: [4], 7: ['INF']}[4]
Checking the if condition ['4']TrueFalse


Skipping the route path through the same node :['4']4

the message seding to neighbor is {1: ['INF'], 3: ['INF'], 4: ['X'], 5: ['INF'], 6: [4], 7: ['INF']}['INF']

updating the path 5['INF']
updated path 5[4, 6]



updating the path 7['INF']
updated path 7[4, 6]


the message seding to neighbor is {1: ['INF'], 3: ['INF'], 4: ['X'], 5: [4, 6], 6: [4], 7: [4, 6]}['INF']
the message seding to neighbor is {1: ['INF'], 3: ['INF'], 4: ['X'], 5: [4, 6], 6: [4], 7: [4, 6]}['INF']
the message seding to neighbor is {1: ['INF'], 3: ['INF'], 4: ['X'], 5: [4, 6], 6: [4], 7: [4, 6]}['X']
the final message to buffer is ['R', '2', '4', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['INF'], 3: ['INF'], 4: ['X'], 5: [4, 6], 6: [4], 7: [4, 6]}[4, 6]
Checking the if condition ['4', '6']TrueFalse

the final message to buffer is ['R', '2', '4', '6', '5', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['INF'], 3: ['INF'], 4: ['X'], 5: [4, 6], 6: [4], 7: [4, 6]}[4]
Checking the if condition ['4']TrueFalse

the final message to buffer is ['R', '2', '4', '6', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['INF'], 3: ['INF'], 4: ['X'], 5: [4, 6], 6: [4], 7: [4, 6]}[4, 6]
Checking the if condition ['4', '6']TrueFalse

the final message to buffer is ['R', '2', '4', '6', '7', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['INF'], 3: ['INF'], 4: ['X'], 5: [4, 6], 6: [4], 7: [4, 6]}['INF']
the message seding to neighbor is {1: ['INF'], 3: ['INF'], 4: ['X'], 5: [4, 6], 6: [4], 7: [4, 6]}['INF']
the message seding to neighbor is {1: ['INF'], 3: ['INF'], 4: ['X'], 5: [4, 6], 6: [4], 7: [4, 6]}['X']
the final message to buffer is ['R', '2', '4', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['INF'], 3: ['INF'], 4: ['X'], 5: [4, 6], 6: [4], 7: [4, 6]}[4, 6]
Checking the if condition ['4', '6']TrueFalse


Skipping the route path through the same node :['4', '6']4

the message seding to neighbor is {1: ['INF'], 3: ['INF'], 4: ['X'], 5: [4, 6], 6: [4], 7: [4, 6]}[4]
Checking the if condition ['4']TrueFalse


Skipping the route path through the same node :['4']4

the message seding to neighbor is {1: ['INF'], 3: ['INF'], 4: ['X'], 5: [4, 6], 6: [4], 7: [4, 6]}[4, 6]
Checking the if condition ['4', '6']TrueFalse


Skipping the route path through the same node :['4', '6']4


updating the path 3['INF']
updated path 3[1]


the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '4', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[4, 6]
Checking the if condition ['4', '6']TrueFalse

the final message to buffer is ['R', '2', '4', '6', '5', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[4]
Checking the if condition ['4']TrueFalse

the final message to buffer is ['R', '2', '4', '6', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '2', '1', '3', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '4', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[4, 6]
Checking the if condition ['4', '6']TrueFalse


Skipping the route path through the same node :['4', '6']4

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[4]
Checking the if condition ['4']TrueFalse


Skipping the route path through the same node :['4']4

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '2', '1', '7', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '4', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[4, 6]
Checking the if condition ['4', '6']TrueFalse

the final message to buffer is ['R', '2', '4', '6', '5', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[4]
Checking the if condition ['4']TrueFalse

the final message to buffer is ['R', '2', '4', '6', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '2', '1', '3', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '4', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[4, 6]
Checking the if condition ['4', '6']TrueFalse


Skipping the route path through the same node :['4', '6']4

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[4]
Checking the if condition ['4']TrueFalse


Skipping the route path through the same node :['4']4

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '2', '1', '7', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '4', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[4, 6]
Checking the if condition ['4', '6']TrueFalse

the final message to buffer is ['R', '2', '4', '6', '5', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[4]
Checking the if condition ['4']TrueFalse

the final message to buffer is ['R', '2', '4', '6', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '2', '1', '3', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '4', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[4, 6]
Checking the if condition ['4', '6']TrueFalse


Skipping the route path through the same node :['4', '6']4

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[4]
Checking the if condition ['4']TrueFalse


Skipping the route path through the same node :['4']4

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '2', '1', '7', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '4', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[4, 6]
Checking the if condition ['4', '6']TrueFalse

the final message to buffer is ['R', '2', '4', '6', '5', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[4]
Checking the if condition ['4']TrueFalse

the final message to buffer is ['R', '2', '4', '6', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '2', '1', '3', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '4', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[4, 6]
Checking the if condition ['4', '6']TrueFalse


Skipping the route path through the same node :['4', '6']4

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[4]
Checking the if condition ['4']TrueFalse


Skipping the route path through the same node :['4']4

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '2', '1', '7', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '4', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[4, 6]
Checking the if condition ['4', '6']TrueFalse

the final message to buffer is ['R', '2', '4', '6', '5', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[4]
Checking the if condition ['4']TrueFalse

the final message to buffer is ['R', '2', '4', '6', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '2', '1', '3', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '4', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[4, 6]
Checking the if condition ['4', '6']TrueFalse


Skipping the route path through the same node :['4', '6']4

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[4]
Checking the if condition ['4']TrueFalse


Skipping the route path through the same node :['4']4

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '2', '1', '7', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '4', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[4, 6]
Checking the if condition ['4', '6']TrueFalse

the final message to buffer is ['R', '2', '4', '6', '5', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[4]
Checking the if condition ['4']TrueFalse

the final message to buffer is ['R', '2', '4', '6', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '2', '1', '3', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '4', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[4, 6]
Checking the if condition ['4', '6']TrueFalse


Skipping the route path through the same node :['4', '6']4

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[4]
Checking the if condition ['4']TrueFalse


Skipping the route path through the same node :['4']4

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '2', '1', '7', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '4', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[4, 6]
Checking the if condition ['4', '6']TrueFalse

the final message to buffer is ['R', '2', '4', '6', '5', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[4]
Checking the if condition ['4']TrueFalse

the final message to buffer is ['R', '2', '4', '6', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '2', '1', '3', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '4', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[4, 6]
Checking the if condition ['4', '6']TrueFalse


Skipping the route path through the same node :['4', '6']4

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[4]
Checking the if condition ['4']TrueFalse


Skipping the route path through the same node :['4']4

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '2', '1', '7', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '4', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[4, 6]
Checking the if condition ['4', '6']TrueFalse

the final message to buffer is ['R', '2', '4', '6', '5', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[4]
Checking the if condition ['4']TrueFalse

the final message to buffer is ['R', '2', '4', '6', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '2', '1', '3', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '4', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[4, 6]
Checking the if condition ['4', '6']TrueFalse


Skipping the route path through the same node :['4', '6']4

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[4]
Checking the if condition ['4']TrueFalse


Skipping the route path through the same node :['4']4

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '2', '1', '7', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '4', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[4, 6]
Checking the if condition ['4', '6']TrueFalse

the final message to buffer is ['R', '2', '4', '6', '5', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[4]
Checking the if condition ['4']TrueFalse

the final message to buffer is ['R', '2', '4', '6', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 1]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse


Skipping the route path through the same node :['1']1

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '1', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '2', '1', '3', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}['X']
the final message to buffer is ['R', '2', '4', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]
the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[4, 6]
Checking the if condition ['4', '6']TrueFalse


Skipping the route path through the same node :['4', '6']4

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[4]
Checking the if condition ['4']TrueFalse


Skipping the route path through the same node :['4']4

the message seding to neighbor is {1: ['X'], 3: [1], 4: ['X'], 5: [4, 6], 6: [4], 7: [1]}[1]
Checking the if condition ['1']TrueFalse

the final message to buffer is ['R', '2', '1', '7', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 4]



[]
